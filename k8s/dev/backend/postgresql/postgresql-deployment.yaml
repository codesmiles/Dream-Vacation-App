# Deployment configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: dev
  labels:
    app: postgres
    tier: database
  annotations:
    description: "Postgres database deployment"
    maintainer: "database-team"
spec:
  replicas: 1
  strategy:
    type: Recreate  # Ensures data consistency for database
  selector:
    matchLabels:
      app: postgres
      tier: database
  template:
    metadata:
      labels:
        app: postgres
        tier: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        fsGroup: 999  # postgres group
        runAsUser: 999  # postgres user
      containers:
      - name: postgres
        image: postgres:15.2  # Specify version explicitly
        imagePullPolicy: IfNotPresent
        ports: 
        - name: postgres
          containerPort: 5432
          protocol: TCP
        envFrom:
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: postgres-secrets
        resources:
          requests:
            cpu: "500m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "1Gi"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - your_username
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - your_username
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
          subPath: postgres  # Prevents volume root ownership issues
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc